[  1%] [32mBuilding CXX object gtest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.o[0m
Removing test result files from '/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr'
[  1%] Built target clean_test_results_kindr
[  3%] [32m[1mLinking CXX shared library ../lib/libgtest.so[0m
[  3%] Built target gtest
[  5%] [32mBuilding CXX object gtest/googletest/CMakeFiles/gtest_main.dir/src/gtest_main.cc.o[0m
[  7%] [32m[1mLinking CXX shared library ../lib/libgtest_main.so[0m
[  7%] Built target gtest_main
[  9%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPhysQuant.dir/test_main.cpp.o[0m
[ 11%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPhysQuant.dir/phys_quant/ForceTest.cpp.o[0m
[ 13%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPhysQuant.dir/phys_quant/WrenchTest.cpp.o[0m
[ 15%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPhysQuant.dir/phys_quant/ScalarTest.cpp.o[0m
[ 17%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPhysQuant[0m
[ 17%] Built target runUnitTestsPhysQuant
[ 19%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsCommon.dir/test_main.cpp.o[0m
[ 21%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsLinearAlgebra.dir/test_main.cpp.o[0m
[ 23%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsLinearAlgebra.dir/linear_algebra/SkewMatrixFromVectorTest.cpp.o[0m
[ 25%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsCommon.dir/common/CommonTest.cpp.o[0m
[ 26%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsCommon[0m
[ 28%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsLinearAlgebra.dir/linear_algebra/PseudoInverseTest.cpp.o[0m
[ 28%] Built target runUnitTestsCommon
[ 30%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsQuaternions.dir/test_main.cpp.o[0m
[ 32%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsQuaternions.dir/quaternions/QuaternionTest.cpp.o[0m
[ 34%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/test_main.cpp.o[0m
[ 36%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/RotationMatrixTest.cpp.o[0m
[ 38%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/RotationQuaternionTest.cpp.o[0m
[ 40%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsLinearAlgebra[0m
[ 40%] Built target runUnitTestsLinearAlgebra
[ 42%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/test_main.cpp.o[0m
[ 44%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/RotationDiffTest.cpp.o[0m
[ 46%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsQuaternions[0m
[ 46%] Built target runUnitTestsQuaternions
[ 48%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPositions.dir/test_main.cpp.o[0m
[ 50%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPositions[0m
[ 50%] Built target runUnitTestsPositions
[ 51%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/LocalAngularVelocityTest.cpp.o[0m
[ 53%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/GlobalAngularVelocityTest.cpp.o[0m
[ 55%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/RotationQuaternionDiffTest.cpp.o[0m
[ 57%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/RotationMatrixDiffTest.cpp.o[0m
[ 59%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/RotationVectorTest.cpp.o[0m
[ 61%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/EulerAnglesZyxDiffTest.cpp.o[0m
[ 63%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotationDiff.dir/rotations/EulerAnglesXyzDiffTest.cpp.o[0m
[ 65%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPose.dir/test_main.cpp.o[0m
[ 67%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPose.dir/poses/PositionTest.cpp.o[0m
[ 69%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsRotationDiff[0m
[ 69%] Built target runUnitTestsRotationDiff
[ 71%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/AngleAxisTest.cpp.o[0m
[ 73%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPose.dir/poses/HomogeneousTransformationTest.cpp.o[0m
[ 75%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPose[0m
[ 76%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/EulerAnglesZyxTest.cpp.o[0m
[ 76%] Built target runUnitTestsPose
[ 78%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPoseDiff.dir/test_main.cpp.o[0m
[ 80%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPoseDiff.dir/poses/PoseDiffTest.cpp.o[0m
[ 82%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPoseDiff.dir/poses/PositionDiffTest.cpp.o[0m
[ 84%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsPoseDiff.dir/poses/TwistWithAngularVelocityTest.cpp.o[0m
[ 86%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/EulerAnglesXyzTest.cpp.o[0m
[ 88%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPoseDiff[0m
[ 88%] Built target runUnitTestsPoseDiff
[ 90%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsVector.dir/test_main.cpp.o[0m
[ 92%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsVector.dir/vectors/VectorsTest.cpp.o[0m
[ 94%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/RotationTest.cpp.o[0m
[ 96%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsVector[0m
[ 96%] Built target runUnitTestsVector
[ 98%] [32mBuilding CXX object test/CMakeFiles/runUnitTestsRotation.dir/rotations/ConventionTest.cpp.o[0m
[100%] [32m[1mLinking CXX executable /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsRotation[0m
[100%] Built target runUnitTestsRotation
[100%] Built target tests
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPhysQuant --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPhysQuant.xml
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsCommon --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsCommon.xml[0;32m[==========] [mRunning 20 tests from 4 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from ForceTorqueTest/0, where TypeParam = kindr::Vector<(kindr::PhysicalType)0, double, 3>
[0;32m[ RUN      ] [mForceTorqueTest/0.testForce
1 2 3
0 0 0
[0;32m[       OK ] [mForceTorqueTest/0.testForce (0 ms)
[0;32m[----------] [m1 test from ForceTorqueTest/0 (0 ms total)

[0;32m[----------] [m7 tests from WrenchTest/0, where TypeParam = float
[0;32m[ RUN      ] [mWrenchTest/0.constructor
[0;32m[       OK ] [mWrenchTest/0.constructor (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.setters
[0;32m[       OK ] [mWrenchTest/0.setters (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.setZero
[0;32m[       OK ] [mWrenchTest/0.setZero (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.getVector
[0;32m[       OK ] [mWrenchTest/0.getVector (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.assignment
[0;32m[       OK ] [mWrenchTest/0.assignment (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.comparison
[0;32m[       OK ] [mWrenchTest/0.comparison (0 ms)
[0;32m[ RUN      ] [mWrenchTest/0.math
[0;32m[       OK ] [mWrenchTest/0.math (0 ms)
[0;32m[----------] [m7 tests from WrenchTest/0 (0 ms total)

[0;32m[----------] [m7 tests from WrenchTest/1, where TypeParam = double
[0;32m[ RUN      ] [mWrenchTest/1.constructor
[0;32m[       OK ] [mWrenchTest/1.constructor (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.setters
[0;32m[       OK ] [mWrenchTest/1.setters (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.setZero
[0;32m[       OK ] [mWrenchTest/1.setZero (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.getVector
[0;32m[       OK ] [mWrenchTest/1.getVector (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.assignment
[0;32m[       OK ] [mWrenchTest/1.assignment (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.comparison
[0;32m[       OK ] [mWrenchTest/1.comparison (0 ms)
[0;32m[ RUN      ] [mWrenchTest/1.math
[0;32m[       OK ] [mWrenchTest/1.math (0 ms)
[0;32m[----------] [m7 tests from WrenchTest/1 (0 ms total)

[0;32m[----------] [m5 tests from ScalarTest
[0;32m[ RUN      ] [mScalarTest.multiplicationWithScalar
[0;32m[       OK ] [mScalarTest.multiplicationWithScalar (0 ms)
[0;32m[ RUN      ] [mScalarTest.divisionByScalar
[0;32m[       OK ] [mScalarTest.divisionByScalar (0 ms)
[0;32m[ RUN      ] [mScalarTest.multiplyTwoScalars
[0;32m[       OK ] [mScalarTest.multiplyTwoScalars (0 ms)
[0;32m[ RUN      ] [mScalarTest.divideTwoScalars
[0;32m[       OK ] [mScalarTest.divideTwoScalars (0 ms)
[0;32m[ RUN      ] [mScalarTest.assignment
[0;32m[       OK ] [mScalarTest.assignment (0 ms)
[0;32m[----------] [m5 tests from ScalarTest (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down

[0;32m[==========] [m20 tests from 4 test suites ran. (0 ms total)
[0;32m[  PASSED  ] [m20 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPhysQuant.xml"
[0;32m[==========] [mRunning 1 test from 1 test suite.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from CommonTest
[0;32m[ RUN      ] [mCommonTest.wrapPosNegPI
[0;32m[       OK ] [mCommonTest.wrapPosNegPI (0 ms)
[0;32m[----------] [m1 test from CommonTest (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m1 test from 1 test suite ran. (0 ms total)
[0;32m[  PASSED  ] [m1 test.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsCommon.xml"
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsLinearAlgebra --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsLinearAlgebra.xml
[0;32m[==========] [mRunning 4 tests from 4 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from SkewMatrixFromVectorTest
[0;32m[ RUN      ] [mSkewMatrixFromVectorTest.testVector
[0;32m[       OK ] [mSkewMatrixFromVectorTest.testVector (0 ms)
[0;32m[----------] [m1 test from SkewMatrixFromVectorTest (0 ms total)

[0;32m[----------] [m1 test from SquarePseudoInverseTest
[100%] Built target _run_tests_kindr_gtest_runUnitTestsPhysQuant
[0;32m[ RUN      ] [mSquarePseudoInverseTest.testVector
[0;32m[       OK ] [mSquarePseudoInverseTest.testVector (0 ms)
[0;32m[----------] [m1 test from SquarePseudoInverseTest (0 ms total)

[0;32m[----------] [m1 test from RowPseudoInverseTest
[0;32m[ RUN      ] [mRowPseudoInverseTest.testVector
[0;32m[       OK ] [mRowPseudoInverseTest.testVector (0 ms)
[0;32m[----------] [m1 test from RowPseudoInverseTest (0 ms total)

[0;32m[----------] [m1 test from ColPseudoInverseTest
[0;32m[ RUN      ] [mColPseudoInverseTest.testVector
[0;32m[       OK ] [mColPseudoInverseTest.testVector (0 ms)
[0;32m[----------] [m1 test from ColPseudoInverseTest (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m4 tests from 4 test suites ran. (1 ms total)
[0;32m[  PASSED  ] [m4 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsLinearAlgebra.xml"
[100%] Built target _run_tests_kindr_gtest_runUnitTestsCommon
[100%] Built target _run_tests_kindr_gtest_runUnitTestsLinearAlgebra
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsQuaternions --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsQuaternions.xml
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsRotation --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsRotation.xml
[0;32m[==========] [mRunning 54 tests from 16 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m10 tests from QuaternionsSingleTest/0, where TypeParam = kindr::Quaternion<double>
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleConstructor
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleConstructor (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleMultiplication
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleMultiplication (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleConjugation
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleConjugation (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleInversion
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleInversion (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleEqualityComparison
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleEqualityComparison (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleInequalityComparison
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleInequalityComparison (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleNormalization
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleNormalization (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleImplementationCast
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleImplementationCast (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleVectorAndVectorConstructor
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleVectorAndVectorConstructor (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/0.testQuaternionSingleSpecialMatrices
[0;32m[==========] [mRunning 504 tests from 139 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m18 tests from RotationMatrixSingleTest/0, where TypeParam = kindr::RotationMatrix<double>
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testConstructors
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testAssignmentOperator
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testParenthesisOperator
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testGetters
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testSetters
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testComparisonEqual
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testComparisonNotEqual
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testGetDisparityAngle
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testIsNear
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testIsNear (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testConcatenation
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testFix
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testVectorRotation
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testExpMap
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testExpMap (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testLogMap
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testLogMap (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testMaps
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testMaps (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testBoxPlus
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testBoxPlus (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testBoxMinus
norms: 0.0824923, 0.0824923
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testBoxMinus (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/0.testBoxOperators
[0;32m[       OK ] [mRotationMatrixSingleTest/0.testBoxOperators (0 ms)
[0;32m[----------] [m18 tests from RotationMatrixSingleTest/0 (0 ms total)

[0;32m[----------] [m18 tests from RotationMatrixSingleTest/1, where TypeParam = kindr::RotationMatrix<float>
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testConstructors
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testAssignmentOperator
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testParenthesisOperator
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testGetters
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testSetters
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testComparisonEqual
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testComparisonNotEqual
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testGetDisparityAngle
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testIsNear
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testIsNear (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testConcatenation
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testFix
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testVectorRotation
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testExpMap
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testExpMap (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testLogMap
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testLogMap (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testMaps
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testMaps (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testBoxPlus
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testBoxPlus (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testBoxMinus
norms: 0.0824923, 0.0824924
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testBoxMinus (0 ms)
[0;32m[ RUN      ] [mRotationMatrixSingleTest/1.testBoxOperators
[0;32m[       OK ] [mRotationMatrixSingleTest/1.testBoxOperators (0 ms)
[0;32m[----------] [m18 tests from RotationMatrixSingleTest/1 (1 ms total)

[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationMatrix<float> >
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testConvertToRotationMatrixUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/0.testInversion
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/0.testInversion (0 ms)
[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/0 (0 ms total)

[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationMatrix<double> >
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testConvertToRotationMatrixUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/1.testInversion
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/1.testInversion (0 ms)
[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/1 (0 ms total)

[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/2, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationMatrix<float> >
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testConvertToRotationMatrixUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/2.testInversion
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/2.testInversion (0 ms)
[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/2 (0 ms total)

[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/3, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationMatrix<double> >
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingConstructor
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingAssignment
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingParenthesisOperator
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testConvertToRotationMatrixUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationMatrixRotationQuaternionPairTest/3.testInversion
[0;32m[       OK ] [mRotationMatrixRotationQuaternionPairTest/3.testInversion (0 ms)
[0;32m[----------] [m7 tests from RotationMatrixRotationQuaternionPairTest/3 (0 ms total)

[0;32m[----------] [m20 tests from RotationQuaternionSingleTest/0, where TypeParam = kindr::RotationQuaternion<double>
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConstructors
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConstructors (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionInversion
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionInversion (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConjugation
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConjugation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionNorm
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionNorm (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionSetters
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionSetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionEqualityComparison
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionEqualityComparison (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionInequalityComparison
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionInequalityComparison (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionIsNear
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionIsNear (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionUniqueness
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionUniqueness (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConcatenation
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionSingleSpecialMatrices
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionSingleSpecialMatrices (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testFix
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionVectorRotation
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionUnitQuaternionCast
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionUnitQuaternionCast (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionToImplementationCast
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionToImplementationCast (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionGetDisparityAngle
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionExponentialMap
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionExponentialMap (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testRotationQuaternionBoxOperators
------------------------------> compute angularVel: 
------------------------------> compute angularVel2: 
angularVel:   1.27215  0.156919 -0.627438
angularVel2:   1.27215  0.156919 -0.627438
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testRotationQuaternionBoxOperators (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testSetRandom
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testSetRandom (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/0.testGetRandom
[0;32m[       OK ] [mRotationQuaternionSingleTest/0.testGetRandom (0 ms)
[0;32m[----------] [m20 tests from RotationQuaternionSingleTest/0 (1 ms total)

[0;32m[----------] [m20 tests from RotationQuaternionSingleTest/1, where TypeParam = kindr::RotationQuaternion<float>
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConstructors
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConstructors (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionInversion
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionInversion (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConjugation
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConjugation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionNorm
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionNorm (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionSetters
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionSetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionEqualityComparison
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionEqualityComparison (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionInequalityComparison
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionInequalityComparison (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionIsNear
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionIsNear (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionUniqueness
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionUniqueness (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConcatenation
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionSingleSpecialMatrices
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionSingleSpecialMatrices (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testFix
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionVectorRotation
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionUnitQuaternionCast
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionUnitQuaternionCast (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionToImplementationCast
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionToImplementationCast (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionGetDisparityAngle
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionExponentialMap
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionExponentialMap (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testRotationQuaternionBoxOperators
------------------------------> compute angularVel: 
------------------------------> compute angularVel2: 
angularVel: 4.37114       0       0
angularVel2: 4.37114       0       0
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testRotationQuaternionBoxOperators (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testSetRandom
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testSetRandom (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionSingleTest/1.testGetRandom
[0;32m[       OK ] [mRotationQuaternionSingleTest/1.testGetRandom (0 ms)
[0;32m[----------] [m20 tests from RotationQuaternionSingleTest/1 (0 ms total)

[0;32m[----------] [m2 tests from RotationQuaternionPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationQuaternion<double> >
[0;32m[ RUN      ] [mRotationQuaternionPairTest/0.testRotationQuaternionAssignmentPrimTypes
[0;32m[       OK ] [mRotationQuaternionPairTest/0.testRotationQuaternionAssignmentPrimTypes (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionPairTest/0.testRotationQuaternionParenthesisPrimTypes
[0;32m[       OK ] [mRotationQuaternionPairTest/0.testRotationQuaternionParenthesisPrimTypes (0 ms)
[0;32m[----------] [m2 tests from RotationQuaternionPairTest/0 (0 ms total)

[0;32m[----------] [m15 tests from RotationVectorSingleTest/0, where TypeParam = kindr::RotationVector<double>
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testConstructors
[0;32m[       OK ] [mRotationVectorSingleTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testGetters
[0;32m[       OK ] [mRotationVectorSingleTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testAssignmentOperator
[0;32m[       OK ] [mRotationVectorSingleTest/0.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testParenthesisOperator
[0;32m[       OK ] [mRotationVectorSingleTest/0.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testSetters
[0;32m[       OK ] [mRotationVectorSingleTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testUniqueness
[0;32m[       OK ] [mRotationVectorSingleTest/0.testUniqueness (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testComparisonEqual
[0;32m[       OK ] [mRotationVectorSingleTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testComparisonNotEqual
[0;32m[       OK ] [mRotationVectorSingleTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testGetDisparityAngle
[0;32m[       OK ] [mRotationVectorSingleTest/0.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testIsNear
[0;32m[       OK ] [mRotationVectorSingleTest/0.testIsNear (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testConcatenation
[0;32m[       OK ] [mRotationVectorSingleTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testFix
[0;32m[       OK ] [mRotationVectorSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testVectorRotation
[0;32m[       OK ] [mRotationVectorSingleTest/0.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testMaps
[0;32m[       OK ] [mRotationVectorSingleTest/0.testMaps (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/0.testBoxOperators
[0;32m[       OK ] [mRotationVectorSingleTest/0.testBoxOperators (0 ms)
[0;32m[----------] [m15 tests from RotationVectorSingleTest/0 (0 ms total)

[0;32m[----------] [m15 tests from RotationVectorSingleTest/1, where TypeParam = kindr::RotationVector<float>
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testConstructors
[0;32m[       OK ] [mRotationVectorSingleTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testGetters
[0;32m[       OK ] [mRotationVectorSingleTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testAssignmentOperator
[0;32m[       OK ] [mRotationVectorSingleTest/1.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testParenthesisOperator
[0;32m[       OK ] [mRotationVectorSingleTest/1.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testSetters
[0;32m[       OK ] [mRotationVectorSingleTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testUniqueness
[0;32m[       OK ] [mRotationVectorSingleTest/1.testUniqueness (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testComparisonEqual
[0;32m[       OK ] [mRotationVectorSingleTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testComparisonNotEqual
[0;32m[       OK ] [mRotationVectorSingleTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testGetDisparityAngle
[0;32m[       OK ] [mRotationVectorSingleTest/1.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testIsNear
[0;32m[       OK ] [mRotationVectorSingleTest/1.testIsNear (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testConcatenation
[0;32m[       OK ] [mRotationVectorSingleTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testFix
[0;32m[       OK ] [mRotationVectorSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testVectorRotation
[0;32m[       OK ] [mRotationVectorSingleTest/1.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testMaps
[0;32m[       OK ] [mRotationVectorSingleTest/1.testMaps (0 ms)
[0;32m[ RUN      ] [mRotationVectorSingleTest/1.testBoxOperators
[0;32m[       OK ] [mRotationVectorSingleTest/1.testBoxOperators (0 ms)
[0;32m[----------] [m15 tests from RotationVectorSingleTest/1 (0 ms total)

[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationVector<float> >
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/0.testConversionRotationQuaternionRotationVector
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/0.testConversionRotationQuaternionRotationVector (0 ms)
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/0.testInversion
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/0.testInversion (0 ms)
[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/0 (0 ms total)

[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationVector<double> >
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/1.testConversionRotationQuaternionRotationVector
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/1.testConversionRotationQuaternionRotationVector (0 ms)
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/1.testInversion
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/1.testInversion (0 ms)
[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/1 (0 ms total)

[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/2, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationVector<float> >
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/2.testConversionRotationQuaternionRotationVector
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/2.testConversionRotationQuaternionRotationVector (0 ms)
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/2.testInversion
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/2.testInversion (0 ms)
[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/2 (0 ms total)

[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/3, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationVector<double> >
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/3.testConversionRotationQuaternionRotationVector
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/3.testConversionRotationQuaternionRotationVector (0 ms)
[0;32m[ RUN      ] [mRotationVectorRotationQuaternionPairTest/3.testInversion
[0;32m[       OK ] [mRotationVectorRotationQuaternionPairTest/3.testInversion (0 ms)
[0;32m[----------] [m2 tests from RotationVectorRotationQuaternionPairTest/3 (0 ms total)

[0;32m[----------] [m12 tests from AngleAxisSingleTest/0, where TypeParam = kindr::AngleAxis<double>
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testConstructors
[0;32m[       OK ] [mAngleAxisSingleTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testGetters
[0;32m[       OK ] [mAngleAxisSingleTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testSetters
[0;32m[       OK ] [mAngleAxisSingleTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testComparisonEqual
[0;32m[       OK ] [mAngleAxisSingleTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testComparisonNotEqual
[0;32m[       OK ] [mAngleAxisSingleTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testGetDisparityAngle
[0;32m[       OK ] [mAngleAxisSingleTest/0.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testIsNear
[0;32m[       OK ] [mAngleAxisSingleTest/0.testIsNear (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testConcatenation
[0;32m[       OK ] [mAngleAxisSingleTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testFix
[0;32m[       OK ] [mAngleAxisSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testVectorRotation
[0;32m[       OK ] [mAngleAxisSingleTest/0.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testMaps
[0;32m[       OK ] [mAngleAxisSingleTest/0.testMaps (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/0.testBoxOperators
[0;32m[       OK ] [mAngleAxisSingleTest/0.testBoxOperators (0 ms)
[0;32m[----------] [m12 tests from AngleAxisSingleTest/0 (0 ms total)

[0;32m[----------] [m12 tests from AngleAxisSingleTest/1, where TypeParam = kindr::AngleAxis<float>
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testConstructors
[0;32m[       OK ] [mAngleAxisSingleTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testGetters
[0;32m[       OK ] [mAngleAxisSingleTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testSetters
[0;32m[       OK ] [mAngleAxisSingleTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testComparisonEqual
[0;32m[       OK ] [mAngleAxisSingleTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testComparisonNotEqual
[0;32m[       OK ] [mAngleAxisSingleTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testGetDisparityAngle
[0;32m[       OK ] [mAngleAxisSingleTest/1.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testIsNear
[0;32m[       OK ] [mAngleAxisSingleTest/1.testIsNear (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testConcatenation
[0;32m[       OK ] [mAngleAxisSingleTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testFix
[0;32m[       OK ] [mAngleAxisSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testVectorRotation
[0;32m[       OK ] [mAngleAxisSingleTest/1.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testMaps
[0;32m[       OK ] [mAngleAxisSingleTest/1.testMaps (0 ms)
[0;32m[ RUN      ] [mAngleAxisSingleTest/1.testBoxOperators
[0;32m[       OK ] [mAngleAxisSingleTest/1.testBoxOperators (0 ms)
[0;32m[----------] [m12 tests from AngleAxisSingleTest/1 (0 ms total)

[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::AngleAxis<float> >
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testConvertToAngleAxisUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/0.testAngleAxisInversion
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/0.testAngleAxisInversion (0 ms)
[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/0 (0 ms total)

[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::AngleAxis<double> >
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testConvertToAngleAxisUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/1.testAngleAxisInversion
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/1.testAngleAxisInversion (0 ms)
[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/1 (0 ms total)

[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/2, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::AngleAxis<float> >
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testConvertToAngleAxisUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/2.testAngleAxisInversion
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/2.testAngleAxisInversion (0 ms)
[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/2 (0 ms total)

[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/3, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::AngleAxis<double> >
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingConstructor
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingConstructor (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingAssignment
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingAssignment (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToRotationQuaternionUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingParenthesisOperator
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testConvertToAngleAxisUsingParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionAngleAxisPairTest/3.testAngleAxisInversion
[0;32m[       OK ] [mRotationQuaternionAngleAxisPairTest/3.testAngleAxisInversion (0 ms)
[0;32m[----------] [m7 tests from RotationQuaternionAngleAxisPairTest/3 (0 ms total)

[0;32m[----------] [m17 tests from EulerAnglesZyxSingleTest/0, where TypeParam = kindr::EulerAnglesZyx<double>
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testConstructors
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testGetters
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testAssignmentOperator
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testParenthesisOperator
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testSetters
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testUniqueness
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testUniqueness (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testComparisonEqual
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testComparisonNotEqual
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testGetDisparityAngle
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testIsNear
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testIsNear (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testConcatenation
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testFix
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testVectorRotation
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testMaps
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testMaps (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testBoxOperators
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testBoxOperators (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testRotationOrder
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testRotationOrder (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/0.testRotationMatrix
kindr:  0.252457  0.966413 -0.048082
 -0.25994 0.0198717  -0.96542
-0.932039  0.256226  0.256226/n ours:  0.252457  0.966413 -0.048082
 -0.25994 0.0198717  -0.96542
-0.932039  0.256226  0.256226
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/0.testRotationMatrix (0 ms)
[0;32m[----------] [m17 tests from EulerAnglesZyxSingleTest/0 (0 ms total)

[0;32m[----------] [m17 tests from EulerAnglesZyxSingleTest/1, where TypeParam = kindr::EulerAnglesZyx<float>
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testConstructors
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testGetters
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testAssignmentOperator
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testParenthesisOperator
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testSetters
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testUniqueness
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testUniqueness (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testComparisonEqual
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testComparisonNotEqual
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testGetDisparityAngle
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testIsNear
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testIsNear (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testConcatenation
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testFix
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testVectorRotation
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testMaps
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testMaps (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testBoxOperators
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testBoxOperators (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testRotationOrder
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testRotationOrder (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxSingleTest/1.testRotationMatrix
kindr:   0.252457   0.966413 -0.0480821
 -0.259939  0.0198717   -0.96542
 -0.932039   0.256226   0.256226/n ours:  0.252457  0.966413 -0.048082
-0.259939 0.0198717  -0.96542
-0.932039  0.256226  0.256226
[0;32m[       OK ] [mEulerAnglesZyxSingleTest/1.testRotationMatrix (0 ms)
[0;32m[----------] [m17 tests from EulerAnglesZyxSingleTest/1 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::EulerAnglesZyx<float> >
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/0.testConversionRotationQuaternionEulerAnglesZyx
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/0.testConversionRotationQuaternionEulerAnglesZyx (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/0.testInversion
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/0.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/0 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::EulerAnglesZyx<double> >
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/1.testConversionRotationQuaternionEulerAnglesZyx
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/1.testConversionRotationQuaternionEulerAnglesZyx (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/1.testInversion
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/1.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/1 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/2, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::EulerAnglesZyx<float> >
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/2.testConversionRotationQuaternionEulerAnglesZyx
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/2.testConversionRotationQuaternionEulerAnglesZyx (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/2.testInversion
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/2.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/2 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/3, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::EulerAnglesZyx<double> >
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/3.testConversionRotationQuaternionEulerAnglesZyx
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/3.testConversionRotationQuaternionEulerAnglesZyx (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxRotationQuaternionPairTest/3.testInversion
[0;32m[       OK ] [mEulerAnglesZyxRotationQuaternionPairTest/3.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesZyxRotationQuaternionPairTest/3 (0 ms total)

[0;32m[----------] [m17 tests from EulerAnglesXyzSingleTest/0, where TypeParam = kindr::EulerAnglesXyz<double>
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testConstructors
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testGetters
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testAssignmentOperator
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testParenthesisOperator
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testSetters
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testUniqueness
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testUniqueness (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testComparisonEqual
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testComparisonNotEqual
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testGetDisparityAngle
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testGetDisparityAngle (1 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testIsNear
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testIsNear (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testConcatenation
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testFix
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testFix (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testVectorRotation
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testMaps
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testMaps (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testBoxOperators
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testBoxOperators (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testRotationOrder
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testRotationOrder (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/0.testRotationMatrix
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/0.testRotationMatrix (0 ms)
[0;32m[----------] [m17 tests from EulerAnglesXyzSingleTest/0 (1 ms total)

[0;32m[----------] [m17 tests from EulerAnglesXyzSingleTest/1, where TypeParam = kindr::EulerAnglesXyz<float>
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testConstructors
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testGetters
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testAssignmentOperator
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testAssignmentOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testParenthesisOperator
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testParenthesisOperator (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testSetters
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testUniqueness
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testUniqueness (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testComparisonEqual
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testComparisonNotEqual
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testGetDisparityAngle
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testGetDisparityAngle (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testIsNear
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testIsNear (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testConcatenation
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testFix
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testFix (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testVectorRotation
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testVectorRotation (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testMaps
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testMaps (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testBoxOperators
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testBoxOperators (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testRotationOrder
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testRotationOrder (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzSingleTest/1.testRotationMatrix
[0;32m[       OK ] [mEulerAnglesXyzSingleTest/1.testRotationMatrix (0 ms)
[0;32m[----------] [m17 tests from EulerAnglesXyzSingleTest/1 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::EulerAnglesXyz<float> >
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/0.testConversionRotationQuaternionEulerAnglesXyz
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/0.testConversionRotationQuaternionEulerAnglesXyz (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/0.testInversion
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/0.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/0 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::EulerAnglesXyz<double> >
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/1.testConversionRotationQuaternionEulerAnglesXyz
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/1.testConversionRotationQuaternionEulerAnglesXyz (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/1.testInversion
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/1.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/1 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/2, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::EulerAnglesXyz<float> >
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/2.testConversionRotationQuaternionEulerAnglesXyz
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/2.testConversionRotationQuaternionEulerAnglesXyz (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/2.testInversion
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/2.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/2 (0 ms total)

[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/3, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::EulerAnglesXyz<double> >
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/3.testConversionRotationQuaternionEulerAnglesXyz
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/3.testConversionRotationQuaternionEulerAnglesXyz (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzRotationQuaternionPairTest/3.testInversion
[0;32m[       OK ] [mEulerAnglesXyzRotationQuaternionPairTest/3.testInversion (0 ms)
[0;32m[----------] [m2 tests from EulerAnglesXyzRotationQuaternionPairTest/3 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/0, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationVectorTestType<kindr::RotationVector<float> > >
[0;32m[ RUN      ] [mConversionTest/0.testAToB
[0;32m[       OK ] [mConversionTest/0.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/0.testBToA
[0;32m[       OK ] [mConversionTest/0.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/0 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/1, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationVectorTestType<kindr::RotationVector<double> > >
[0;32m[ RUN      ] [mConversionTest/1.testAToB
[0;32m[       OK ] [mConversionTest/1.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/1.testBToA
[0;32m[       OK ] [mConversionTest/1.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/1 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/2, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationVectorTestType<kindr::RotationVector<float> > >
[0;32m[ RUN      ] [mConversionTest/2.testAToB
[0;32m[       OK ] [mConversionTest/2.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/2.testBToA
[0;32m[       OK ] [mConversionTest/2.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/2 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/3, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationVectorTestType<kindr::RotationVector<double> > >
[0;32m[ RUN      ] [mConversionTest/3.testAToB
[0;32m[       OK ] [mConversionTest/3.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/3.testBToA
[0;32m[       OK ] [mConversionTest/3.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/3 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/4, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConversionTest/4.testAToB
[0;32m[       OK ] [mConversionTest/4.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/4.testBToA
[0;32m[       OK ] [mConversionTest/4.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/4 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/5, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConversionTest/5.testAToB
[0;32m[       OK ] [mConversionTest/5.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/5.testBToA
[0;32m[       OK ] [mConversionTest/5.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/5 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/6, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConversionTest/6.testAToB
[0;32m[       OK ] [mConversionTest/6.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/6.testBToA
[0;32m[       OK ] [mConversionTest/6.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/6 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/7, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConversionTest/7.testAToB
[0;32m[       OK ] [mConversionTest/7.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/7.testBToA
[0;32m[       OK ] [mConversionTest/7.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/7 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/8, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/8.testAToB
[0;32m[       OK ] [mConversionTest/8.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/8.testBToA
[0;32m[       OK ] [mConversionTest/8.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/8 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/9, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/9.testAToB
[0;32m[       OK ] [mConversionTest/9.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/9.testBToA
[0;32m[       OK ] [mConversionTest/9.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/9 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/10, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/10.testAToB
[0;32m[       OK ] [mConversionTest/10.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/10.testBToA
[0;32m[       OK ] [mConversionTest/10.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/10 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/11, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/11.testAToB
[0;32m[       OK ] [mConversionTest/11.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/11.testBToA
[0;32m[       OK ] [mConversionTest/11.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/11 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/12, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConversionTest/12.testAToB
[0;32m[       OK ] [mConversionTest/12.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/12.testBToA
[0;32m[       OK ] [mConversionTest/12.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/12 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/13, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConversionTest/13.testAToB
[0;32m[       OK ] [mConversionTest/13.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/13.testBToA
[0;32m[       OK ] [mConversionTest/13.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/13 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/14, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConversionTest/14.testAToB
[0;32m[       OK ] [mConversionTest/14.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/14.testBToA
[0;32m[       OK ] [mConversionTest/14.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/14 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/15, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConversionTest/15.testAToB
[0;32m[       OK ] [mConversionTest/15.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/15.testBToA
[0;32m[       OK ] [mConversionTest/15.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/15 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/16, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/16.testAToB
[0;32m[       OK ] [mConversionTest/16.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/16.testBToA
[0;32m[       OK ] [mConversionTest/16.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/16 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/17, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/17.testAToB
[0;32m[       OK ] [mConversionTest/17.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/17.testBToA
[0;32m[       OK ] [mConversionTest/17.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/17 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/18, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/18.testAToB
[0;32m[       OK ] [mConversionTest/18.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/18.testBToA
[0;32m[       OK ] [mConversionTest/18.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/18 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/19, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/19.testAToB
[0;32m[       OK ] [mConversionTest/19.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/19.testBToA
[0;32m[       OK ] [mConversionTest/19.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/19 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/20, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/20.testAToB
[0;32m[       OK ] [mConversionTest/20.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/20.testBToA
[0;32m[       OK ] [mConversionTest/20.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/20 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/21, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/21.testAToB
[0;32m[       OK ] [mConversionTest/21.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/21.testBToA
[0;32m[       OK ] [mConversionTest/21.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/21 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/22, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConversionTest/22.testAToB
[0;32m[       OK ] [mConversionTest/22.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/22.testBToA
[0;32m[       OK ] [mConversionTest/22.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/22 (0 ms total)

[0;32m[----------] [m2 tests from ConversionTest/23, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConversionTest/23.testAToB
[0;32m[       OK ] [mConversionTest/23.testAToB (0 ms)
[0;32m[ RUN      ] [mConversionTest/23.testBToA
[0;32m[       OK ] [mConversionTest/23.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConversionTest/23 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/0, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/0.testAToB
[0;32m[       OK ] [mConversion2Test/0.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/0.testBToA
[0;32m[       OK ] [mConversion2Test/0.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/0 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/1, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/1.testAToB
[0;32m[       OK ] [mConversion2Test/1.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/1.testBToA
[0;32m[       OK ] [mConversion2Test/1.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/1 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/2, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/2.testAToB
[0;32m[       OK ] [mConversion2Test/2.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/2.testBToA
[0;32m[       OK ] [mConversion2Test/2.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/2 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/3, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/3.testAToB
[0;32m[       OK ] [mConversion2Test/3.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/3.testBToA
[0;32m[       OK ] [mConversion2Test/3.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/3 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/4, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/4.testAToB
[0;32m[       OK ] [mConversion2Test/4.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/4.testBToA
[0;32m[       OK ] [mConversion2Test/4.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/4 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/5, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/5.testAToB
[0;32m[       OK ] [mConversion2Test/5.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/5.testBToA
[0;32m[       OK ] [mConversion2Test/5.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/5 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/6, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/6.testAToB
[0;32m[       OK ] [mConversion2Test/6.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/6.testBToA
[0;32m[       OK ] [mConversion2Test/6.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/6 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/7, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/7.testAToB
[0;32m[       OK ] [mConversion2Test/7.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/7.testBToA
[0;32m[       OK ] [mConversion2Test/7.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/7 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/8, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/8.testAToB
[0;32m[       OK ] [mConversion2Test/8.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/8.testBToA
[0;32m[       OK ] [mConversion2Test/8.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/8 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/9, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/9.testAToB
[0;32m[       OK ] [mConversion2Test/9.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/9.testBToA
[0;32m[       OK ] [mConversion2Test/9.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/9 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/10, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/10.testAToB
[0;32m[       OK ] [mConversion2Test/10.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/10.testBToA
[0;32m[       OK ] [mConversion2Test/10.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/10 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/11, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/11.testAToB
[0;32m[       OK ] [mConversion2Test/11.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/11.testBToA
[0;32m[       OK ] [mConversion2Test/11.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/11 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/12, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/12.testAToB
[0;32m[       OK ] [mConversion2Test/12.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/12.testBToA
[0;32m[       OK ] [mConversion2Test/12.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/12 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/13, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/13.testAToB
[0;32m[       OK ] [mConversion2Test/13.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/13.testBToA
[0;32m[       OK ] [mConversion2Test/13.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/13 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/14, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion2Test/14.testAToB
[0;32m[       OK ] [mConversion2Test/14.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/14.testBToA
[0;32m[       OK ] [mConversion2Test/14.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/14 (0 ms total)

[0;32m[----------] [m2 tests from Conversion2Test/15, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion2Test/15.testAToB
[0;32m[       OK ] [mConversion2Test/15.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion2Test/15.testBToA
[0;32m[       OK ] [mConversion2Test/15.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion2Test/15 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/0, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/0.testAToB
[0;32m[       OK ] [mConversion3Test/0.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/0.testBToA
[0;32m[       OK ] [mConversion3Test/0.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/0 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/1, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/1.testAToB
[0;32m[       OK ] [mConversion3Test/1.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/1.testBToA
[0;32m[       OK ] [mConversion3Test/1.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/1 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/2, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/2.testAToB
[0;32m[       OK ] [mConversion3Test/2.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/2.testBToA
[0;32m[       OK ] [mConversion3Test/2.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/2 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/3, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/3.testAToB
[0;32m[       OK ] [mConversion3Test/3.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/3.testBToA
[0;32m[       OK ] [mConversion3Test/3.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/3 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/4, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/4.testAToB
[0;32m[       OK ] [mConversion3Test/4.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/4.testBToA
[0;32m[       OK ] [mConversion3Test/4.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/4 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/5, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/5.testAToB
[0;32m[       OK ] [mConversion3Test/5.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/5.testBToA
[0;32m[       OK ] [mConversion3Test/5.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/5 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/6, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/6.testAToB
[0;32m[       OK ] [mConversion3Test/6.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/6.testBToA
[0;32m[       OK ] [mConversion3Test/6.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/6 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/7, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/7.testAToB
[0;32m[       OK ] [mConversion3Test/7.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/7.testBToA
[0;32m[       OK ] [mConversion3Test/7.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/7 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/8, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/8.testAToB
[0;32m[       OK ] [mConversion3Test/8.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/8.testBToA
[0;32m[       OK ] [mConversion3Test/8.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/8 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/9, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/9.testAToB
[0;32m[       OK ] [mConversion3Test/9.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/9.testBToA
[0;32m[       OK ] [mConversion3Test/9.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/9 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/10, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/10.testAToB
[0;32m[       OK ] [mConversion3Test/10.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/10.testBToA
[0;32m[       OK ] [mConversion3Test/10.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/10 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/11, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/11.testAToB
[0;32m[       OK ] [mConversion3Test/11.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/11.testBToA
[0;32m[       OK ] [mConversion3Test/11.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/11 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/12, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/12.testAToB
[0;32m[       OK ] [mConversion3Test/12.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/12.testBToA
[0;32m[       OK ] [mConversion3Test/12.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/12 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/13, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/13.testAToB
[0;32m[       OK ] [mConversion3Test/13.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/13.testBToA
[0;32m[       OK ] [mConversion3Test/13.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/13 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/14, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/14.testAToB
[0;32m[       OK ] [mConversion3Test/14.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/14.testBToA
[0;32m[       OK ] [mConversion3Test/14.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/14 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/15, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/15.testAToB
[0;32m[       OK ] [mConversion3Test/15.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/15.testBToA
[0;32m[       OK ] [mConversion3Test/15.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/15 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/16, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/16.testAToB
[0;32m[       OK ] [mConversion3Test/16.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/16.testBToA
[0;32m[       OK ] [mConversion3Test/16.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/16 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/17, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/17.testAToB
[0;32m[       OK ] [mConversion3Test/17.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/17.testBToA
[0;32m[       OK ] [mConversion3Test/17.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/17 (0 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/18, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion3Test/18.testAToB
[0;32m[       OK ] [mConversion3Test/18.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/18.testBToA
[0;32m[       OK ] [mConversion3Test/18.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/18 (1 ms total)

[0;32m[----------] [m2 tests from Conversion3Test/19, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion3Test/19.testAToB
[0;32m[       OK ] [mConversion3Test/19.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion3Test/19.testBToA
[0;32m[       OK ] [mConversion3Test/19.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion3Test/19 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/0, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/0.testAToB
[0;32m[       OK ] [mConversion4Test/0.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/0.testBToA
[0;32m[       OK ] [mConversion4Test/0.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/0 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/1, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/1.testAToB
[0;32m[       OK ] [mConversion4Test/1.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/1.testBToA
[0;32m[       OK ] [mConversion4Test/1.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/1 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/2, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/2.testAToB
[0;32m[       OK ] [mConversion4Test/2.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/2.testBToA
[0;32m[       OK ] [mConversion4Test/2.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/2 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/3, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/3.testAToB
[0;32m[       OK ] [mConversion4Test/3.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/3.testBToA
[0;32m[       OK ] [mConversion4Test/3.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/3 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/4, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/4.testAToB
[0;32m[       OK ] [mConversion4Test/4.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/4.testBToA
[0;32m[       OK ] [mConversion4Test/4.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/4 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/5, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/5.testAToB
[0;32m[       OK ] [mConversion4Test/5.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/5.testBToA
[0;32m[       OK ] [mConversion4Test/5.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/5 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/6, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/6.testAToB
[0;32m[       OK ] [mConversion4Test/6.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/6.testBToA
[0;32m[       OK ] [mConversion4Test/6.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/6 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/7, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/7.testAToB
[0;32m[       OK ] [mConversion4Test/7.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/7.testBToA
[0;32m[       OK ] [mConversion4Test/7.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/7 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/8, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/8.testAToB
[0;32m[       OK ] [mConversion4Test/8.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/8.testBToA
[0;32m[       OK ] [mConversion4Test/8.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/8 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/9, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/9.testAToB
[0;32m[       OK ] [mConversion4Test/9.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/9.testBToA
[0;32m[       OK ] [mConversion4Test/9.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/9 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/10, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/10.testAToB
[0;32m[       OK ] [mConversion4Test/10.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/10.testBToA
[0;32m[       OK ] [mConversion4Test/10.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/10 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/11, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/11.testAToB
[0;32m[       OK ] [mConversion4Test/11.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/11.testBToA
[0;32m[       OK ] [mConversion4Test/11.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/11 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/12, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/12.testAToB
[0;32m[       OK ] [mConversion4Test/12.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/12.testBToA
[0;32m[       OK ] [mConversion4Test/12.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/12 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/13, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/13.testAToB
[0;32m[       OK ] [mConversion4Test/13.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/13.testBToA
[0;32m[       OK ] [mConversion4Test/13.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/13 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/14, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConversion4Test/14.testAToB
[0;32m[       OK ] [mConversion4Test/14.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/14.testBToA
[0;32m[       OK ] [mConversion4Test/14.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/14 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/15, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConversion4Test/15.testAToB
[0;32m[       OK ] [mConversion4Test/15.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/15.testBToA
[0;32m[       OK ] [mConversion4Test/15.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/15 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/16, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion4Test/16.testAToB
[0;32m[       OK ] [mConversion4Test/16.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/16.testBToA
[0;32m[       OK ] [mConversion4Test/16.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/16 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/17, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion4Test/17.testAToB
[0;32m[       OK ] [mConversion4Test/17.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/17.testBToA
[0;32m[       OK ] [mConversion4Test/17.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/17 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/18, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<float> > >
[0;32m[ RUN      ] [mConversion4Test/18.testAToB
[0;32m[       OK ] [mConversion4Test/18.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/18.testBToA
[0;32m[       OK ] [mConversion4Test/18.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/18 (0 ms total)

[0;32m[----------] [m2 tests from Conversion4Test/19, where TypeParam = std::pair<EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> >, EulerAnglesXyzTestType<kindr::EulerAnglesXyz<double> > >
[0;32m[ RUN      ] [mConversion4Test/19.testAToB
[0;32m[       OK ] [mConversion4Test/19.testAToB (0 ms)
[0;32m[ RUN      ] [mConversion4Test/19.testBToA
[0;32m[       OK ] [mConversion4Test/19.testBToA (0 ms)
[0;32m[----------] [m2 tests from Conversion4Test/19 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/0, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationVectorTestType<kindr::RotationVector<float> > >
[0;32m[ RUN      ] [mConcatenationTest/0.testAToB
[0;32m[       OK ] [mConcatenationTest/0.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/0.testBToA
[0;32m[       OK ] [mConcatenationTest/0.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/0 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/1, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationVectorTestType<kindr::RotationVector<double> > >
[0;32m[ RUN      ] [mConcatenationTest/1.testAToB
[0;32m[       OK ] [mConcatenationTest/1.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/1.testBToA
[0;32m[       OK ] [mConcatenationTest/1.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/1 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/2, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConcatenationTest/2.testAToB
[0;32m[       OK ] [mConcatenationTest/2.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/2.testBToA
[0;32m[       OK ] [mConcatenationTest/2.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/2 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/3, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConcatenationTest/3.testAToB
[0;32m[       OK ] [mConcatenationTest/3.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/3.testBToA
[0;32m[       OK ] [mConcatenationTest/3.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/3 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/4, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConcatenationTest/4.testAToB
[0;32m[       OK ] [mConcatenationTest/4.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/4.testBToA
[0;32m[       OK ] [mConcatenationTest/4.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/4 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/5, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConcatenationTest/5.testAToB
[0;32m[       OK ] [mConcatenationTest/5.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/5.testBToA
[0;32m[       OK ] [mConcatenationTest/5.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/5 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/6, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, RotationMatrixTestType<kindr::RotationMatrix<float> > >
[0;32m[ RUN      ] [mConcatenationTest/6.testAToB
[0;32m[       OK ] [mConcatenationTest/6.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/6.testBToA
[0;32m[       OK ] [mConcatenationTest/6.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/6 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/7, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, RotationMatrixTestType<kindr::RotationMatrix<double> > >
[0;32m[ RUN      ] [mConcatenationTest/7.testAToB
[0;32m[       OK ] [mConcatenationTest/7.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/7.testBToA
[0;32m[       OK ] [mConcatenationTest/7.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/7 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/8, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConcatenationTest/8.testAToB
[0;32m[       OK ] [mConcatenationTest/8.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/8.testBToA
[0;32m[       OK ] [mConcatenationTest/8.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/8 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/9, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConcatenationTest/9.testAToB
[0;32m[       OK ] [mConcatenationTest/9.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/9.testBToA
[0;32m[       OK ] [mConcatenationTest/9.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/9 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/10, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, AngleAxisTestType<kindr::AngleAxis<float> > >
[0;32m[ RUN      ] [mConcatenationTest/10.testAToB
[0;32m[       OK ] [mConcatenationTest/10.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/10.testBToA
[0;32m[       OK ] [mConcatenationTest/10.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/10 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/11, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, AngleAxisTestType<kindr::AngleAxis<double> > >
[0;32m[ RUN      ] [mConcatenationTest/11.testAToB
[0;32m[       OK ] [mConcatenationTest/11.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/11.testBToA
[0;32m[       OK ] [mConcatenationTest/11.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/11 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/12, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConcatenationTest/12.testAToB
[0;32m[       OK ] [mConcatenationTest/12.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/12.testBToA
[0;32m[       OK ] [mConcatenationTest/12.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/12 (1 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/13, where TypeParam = std::pair<RotationQuaternionTestType<kindr::RotationQuaternion<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConcatenationTest/13.testAToB
[0;32m[       OK ] [mConcatenationTest/13.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/13.testBToA
[0;32m[       OK ] [mConcatenationTest/13.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/13 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/14, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConcatenationTest/14.testAToB
[0;32m[       OK ] [mConcatenationTest/14.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/14.testBToA
[0;32m[       OK ] [mConcatenationTest/14.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/14 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/15, where TypeParam = std::pair<RotationVectorTestType<kindr::RotationVector<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConcatenationTest/15.testAToB
[0;32m[       OK ] [mConcatenationTest/15.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/15.testBToA
[0;32m[       OK ] [mConcatenationTest/15.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/15 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/16, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConcatenationTest/16.testAToB
[0;32m[       OK ] [mConcatenationTest/16.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/16.testBToA
[0;32m[       OK ] [mConcatenationTest/16.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/16 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/17, where TypeParam = std::pair<AngleAxisTestType<kindr::AngleAxis<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConcatenationTest/17.testAToB
[0;32m[       OK ] [mConcatenationTest/17.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/17.testBToA
[0;32m[       OK ] [mConcatenationTest/17.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/17 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/18, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<float> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<float> > >
[0;32m[ RUN      ] [mConcatenationTest/18.testAToB
[0;32m[       OK ] [mConcatenationTest/18.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/18.testBToA
[0;32m[       OK ] [mConcatenationTest/18.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/18 (0 ms total)

[0;32m[----------] [m2 tests from ConcatenationTest/19, where TypeParam = std::pair<RotationMatrixTestType<kindr::RotationMatrix<double> >, EulerAnglesZyxTestType<kindr::EulerAnglesZyx<double> > >
[0;32m[ RUN      ] [mConcatenationTest/19.testAToB
[0;32m[       OK ] [mConcatenationTest/19.testAToB (0 ms)
[0;32m[ RUN      ] [mConcatenationTest/19.testBToA
[0;32m[       OK ] [mConcatenationTest/19.testBToA (0 ms)
[0;32m[----------] [m2 tests from ConcatenationTest/19 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/0, where TypeParam = kindr::RotationQuaternion<double>
[0;32m[ RUN      ] [mKindrConventionTest/0.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/0.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/0.Concatenation
[0;32m[       OK ] [mKindrConventionTest/0.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/0.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/0.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/0.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/0.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/0 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/1, where TypeParam = kindr::EulerAnglesZyx<double>
[0;32m[ RUN      ] [mKindrConventionTest/1.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/1.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/1.Concatenation
[0;32m[       OK ] [mKindrConventionTest/1.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/1.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/1.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/1.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/1.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/1 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/2, where TypeParam = kindr::EulerAnglesXyz<double>
[0;32m[ RUN      ] [mKindrConventionTest/2.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/2.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/2.Concatenation
[0;32m[       OK ] [mKindrConventionTest/2.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/2.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/2.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/2.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/2.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/2 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/3, where TypeParam = kindr::RotationMatrix<double>
[0;32m[ RUN      ] [mKindrConventionTest/3.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/3.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/3.Concatenation
[0;32m[       OK ] [mKindrConventionTest/3.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/3.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/3.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/3.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/3.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/3 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/4, where TypeParam = kindr::RotationVector<double>
[0;32m[ RUN      ] [mKindrConventionTest/4.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/4.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/4.Concatenation
[0;32m[       OK ] [mKindrConventionTest/4.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/4.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/4.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/4.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/4.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/4 (0 ms total)

[0;32m[----------] [m4 tests from KindrConventionTest/5, where TypeParam = kindr::AngleAxis<double>
[0;32m[ RUN      ] [mKindrConventionTest/5.GeometricalInterpretation
[0;32m[       OK ] [mKindrConventionTest/5.GeometricalInterpretation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/5.Concatenation
[0;32m[       OK ] [mKindrConventionTest/5.Concatenation (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/5.BoxPlus
[0;32m[       OK ] [mKindrConventionTest/5.BoxPlus (0 ms)
[0;32m[ RUN      ] [mKindrConventionTest/5.RotationMatrix
[0;32m[       OK ] [mKindrConventionTest/5.RotationMatrix (0 ms)
[0;32m[----------] [m4 tests from KindrConventionTest/5 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[       OK ] [mQuaternionsSingleTest/0.testQuaternionSingleSpecialMatrices (0 ms)
[0;32m[----------] [m10 tests from QuaternionsSingleTest/0 (8 ms total)

[0;32m[----------] [m10 tests from QuaternionsSingleTest/1, where TypeParam = kindr::Quaternion<float>
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleConstructor
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleConstructor (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleMultiplication
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleMultiplication (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleConjugation
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleConjugation (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleInversion
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleInversion (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleEqualityComparison
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleEqualityComparison (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleInequalityComparison
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleInequalityComparison (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleNormalization
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleNormalization (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleImplementationCast
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleImplementationCast (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleVectorAndVectorConstructor
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleVectorAndVectorConstructor (0 ms)
[0;32m[ RUN      ] [mQuaternionsSingleTest/1.testQuaternionSingleSpecialMatrices
[0;32m[       OK ] [mQuaternionsSingleTest/1.testQuaternionSingleSpecialMatrices (0 ms)
[0;32m[----------] [m10 tests from QuaternionsSingleTest/1 (1 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/0, where TypeParam = std::pair<kindr::Quaternion<double>, kindr::Quaternion<double> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/0.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/0.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/0 (1 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/1, where TypeParam = std::pair<kindr::Quaternion<double>, kindr::Quaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/1.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/1.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/1 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/2, where TypeParam = std::pair<kindr::Quaternion<float>, kindr::Quaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/2.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/2.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/2 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/3, where TypeParam = std::pair<kindr::UnitQuaternion<double>, kindr::UnitQuaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/3.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/3.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/3 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/4, where TypeParam = std::pair<kindr::UnitQuaternion<double>, kindr::Quaternion<double> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/4.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/4.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/4 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/5, where TypeParam = std::pair<kindr::UnitQuaternion<double>, kindr::UnitQuaternion<double> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/5.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/5.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/5 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/6, where TypeParam = std::pair<kindr::UnitQuaternion<float>, kindr::Quaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/6.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/6.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/6 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/7, where TypeParam = std::pair<kindr::UnitQuaternion<double>, kindr::Quaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/7.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/7.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/7 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/8, where TypeParam = std::pair<kindr::UnitQuaternion<float>, kindr::Quaternion<double> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/8.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/8.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/8 (0 ms total)

[0;32m[----------] [m1 test from QuaternionsPairsTest/9, where TypeParam = std::pair<kindr::UnitQuaternion<float>, kindr::UnitQuaternion<float> >
[0;32m[ RUN      ] [mQuaternionsPairsTest/9.testQuaternionPrimeTypeCasting
[0;32m[       OK ] [mQuaternionsPairsTest/9.testQuaternionPrimeTypeCasting (0 ms)
[0;32m[----------] [m1 test from QuaternionsPairsTest/9 (0 ms total)

[0;32m[----------] [m2 tests from QuaternionsPrimTypeTest/0, where TypeParam = float
[0;32m[ RUN      ] [mQuaternionsPrimTypeTest/0.testQuaternionAssignmentCasting
[0;32m[       OK ] [mQuaternionsPrimTypeTest/0.testQuaternionAssignmentCasting (0 ms)
[0;32m[ RUN      ] [mQuaternionsPrimTypeTest/0.testQuaternionToUnitQuaternion
[0;32m[       OK ] [mQuaternionsPrimTypeTest/0.testQuaternionToUnitQuaternion (0 ms)
[0;32m[----------] [m2 tests from QuaternionsPrimTypeTest/0 (1 ms total)

[0;32m[----------] [m2 tests from QuaternionsPrimTypeTest/1, where TypeParam = double
[0;32m[ RUN      ] [mQuaternionsPrimTypeTest/1.testQuaternionAssignmentCasting
[0;32m[       OK ] [mQuaternionsPrimTypeTest/1.testQuaternionAssignmentCasting (0 ms)
[0;32m[ RUN      ] [mQuaternionsPrimTypeTest/1.testQuaternionToUnitQuaternion
[0;32m[       OK ] [mQuaternionsPrimTypeTest/1.testQuaternionToUnitQuaternion (0 ms)
[0;32m[----------] [m2 tests from QuaternionsPrimTypeTest/1 (0 ms total)

[0;32m[----------] [m10 tests from UnitQuaternionsSingleTest/0, where TypeParam = kindr::UnitQuaternion<double>
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleConstructor
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleConstructor (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleMultiplication
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleMultiplication (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleConjugation
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleConjugation (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleInversion
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleInversion (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleEqualityComparison
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleEqualityComparison (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleInequalityComparison
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleInequalityComparison (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleNormalization
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleNormalization (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleImplementationCast
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleImplementationCast (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleSpecialMatrices
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testUnitQuaternionSingleSpecialMatrices (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/0.testQuaternionSingleVectorAndVectorConstructor
[0;32m[       OK ] [mUnitQuaternionsSingleTest/0.testQuaternionSingleVectorAndVectorConstructor (0 ms)
[0;32m[----------] [m10 tests from UnitQuaternionsSingleTest/0 (0 ms total)

[0;32m[----------] [m10 tests from UnitQuaternionsSingleTest/1, where TypeParam = kindr::UnitQuaternion<float>
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleConstructor
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleConstructor (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleMultiplication
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleMultiplication (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleConjugation
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleConjugation (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleInversion
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleInversion (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleEqualityComparison
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleEqualityComparison (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleInequalityComparison
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleInequalityComparison (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleNormalization
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleNormalization (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleImplementationCast
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleImplementationCast (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleSpecialMatrices
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testUnitQuaternionSingleSpecialMatrices (0 ms)
[0;32m[ RUN      ] [mUnitQuaternionsSingleTest/1.testQuaternionSingleVectorAndVectorConstructor
[0;32m[       OK ] [mUnitQuaternionsSingleTest/1.testQuaternionSingleVectorAndVectorConstructor (0 ms)
[0;32m[----------] [m10 tests from UnitQuaternionsSingleTest/1 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m54 tests from 16 test suites ran. (15 ms total)
[0;32m[  PASSED  ] [m54 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsQuaternions.xml"
[0;32m[==========] [m504 tests from 139 test suites ran. (7 ms total)
[0;32m[  PASSED  ] [m504 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsRotation.xml"
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsRotationDiff --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsRotationDiff.xml
[100%] Built target _run_tests_kindr_gtest_runUnitTestsQuaternions
[0;32m[==========] [mRunning 82 tests from 22 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from RotationDiffPairTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationQuaternionDiff<double> >
[0;32m[ RUN      ] [mRotationDiffPairTest/0.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/0.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/0 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationQuaternionDiff<float> >
[0;32m[ RUN      ] [mRotationDiffPairTest/1.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/1.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/1 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/2, where TypeParam = std::pair<kindr::RotationMatrix<double>, kindr::RotationMatrixDiff<double> >
[0;32m[ RUN      ] [mRotationDiffPairTest/2.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/2.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/2 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/3, where TypeParam = std::pair<kindr::RotationMatrix<float>, kindr::RotationMatrixDiff<float> >
[0;32m[ RUN      ] [mRotationDiffPairTest/3.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/3.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/3 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/4, where TypeParam = std::pair<kindr::EulerAnglesZyx<double>, kindr::EulerAnglesZyxDiff<double> >
[0;32m[ RUN      ] [mRotationDiffPairTest/4.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/4.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/4 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/5, where TypeParam = std::pair<kindr::EulerAnglesZyx<float>, kindr::EulerAnglesZyxDiff<float> >
[0;32m[ RUN      ] [mRotationDiffPairTest/5.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/5.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/5 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/6, where TypeParam = std::pair<kindr::EulerAnglesXyz<double>, kindr::EulerAnglesXyzDiff<double> >
[0;32m[ RUN      ] [mRotationDiffPairTest/6.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/6.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/6 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffPairTest/7, where TypeParam = std::pair<kindr::EulerAnglesXyz<float>, kindr::EulerAnglesXyzDiff<float> >
[0;32m[ RUN      ] [mRotationDiffPairTest/7.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffPairTest/7.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffPairTest/7 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffSingleTest/0, where TypeParam = std::pair<kindr::RotationQuaternion<double>, kindr::RotationQuaternionDiff<double> >
[0;32m[ RUN      ] [mRotationDiffSingleTest/0.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffSingleTest/0.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffSingleTest/0 (0 ms total)

[0;32m[----------] [m1 test from RotationDiffSingleTest/1, where TypeParam = std::pair<kindr::RotationQuaternion<float>, kindr::RotationQuaternionDiff<float> >
[0;32m[ RUN      ] [mRotationDiffSingleTest/1.testConversionToLocalAngularVelocity
[0;32m[       OK ] [mRotationDiffSingleTest/1.testConversionToLocalAngularVelocity (0 ms)
[0;32m[----------] [m1 test from RotationDiffSingleTest/1 (0 ms total)

[0;32m[----------] [m6 tests from LocalAngularVelocityTest/0, where TypeParam = kindr::LocalAngularVelocity<double>
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testConstructors
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testGetters
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testSetters
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testAddition
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testAddition (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testMultiplication
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testMultiplication (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/0.testConversionFromGlobalAngularVelocity
[0;32m[       OK ] [mLocalAngularVelocityTest/0.testConversionFromGlobalAngularVelocity (0 ms)
[0;32m[----------] [m6 tests from LocalAngularVelocityTest/0 (0 ms total)

[0;32m[----------] [m6 tests from LocalAngularVelocityTest/1, where TypeParam = kindr::LocalAngularVelocity<float>
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testConstructors
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testGetters
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testSetters
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testAddition
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testAddition (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testMultiplication
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testMultiplication (0 ms)
[0;32m[ RUN      ] [mLocalAngularVelocityTest/1.testConversionFromGlobalAngularVelocity
[0;32m[       OK ] [mLocalAngularVelocityTest/1.testConversionFromGlobalAngularVelocity (0 ms)
[0;32m[----------] [m6 tests from LocalAngularVelocityTest/1 (0 ms total)

[0;32m[----------] [m6 tests from GlobalAngularVelocityTest/0, where TypeParam = kindr::GlobalAngularVelocity<double>
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testConstructors
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testGetters
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testSetters
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testAddition
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testAddition (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testMultiplication
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testMultiplication (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/0.testConversionFromLocalAngularVelocity
[0;32m[       OK ] [mGlobalAngularVelocityTest/0.testConversionFromLocalAngularVelocity (0 ms)
[0;32m[----------] [m6 tests from GlobalAngularVelocityTest/0 (0 ms total)

[0;32m[----------] [m6 tests from GlobalAngularVelocityTest/1, where TypeParam = kindr::GlobalAngularVelocity<float>
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testConstructors
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testGetters
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testSetters
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testAddition
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testAddition (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testMultiplication
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testMultiplication (0 ms)
[0;32m[ RUN      ] [mGlobalAngularVelocityTest/1.testConversionFromLocalAngularVelocity
[0;32m[       OK ] [mGlobalAngularVelocityTest/1.testConversionFromLocalAngularVelocity (0 ms)
[0;32m[----------] [m6 tests from GlobalAngularVelocityTest/1 (0 ms total)

[0;32m[----------] [m5 tests from RotationQuaternionDiffTest/0, where TypeParam = kindr::RotationQuaternionDiff<double>
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/0.testConstructors
[0;32m[       OK ] [mRotationQuaternionDiffTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/0.testGetters
[0;32m[       OK ] [mRotationQuaternionDiffTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/0.testSetters
[0;32m[       OK ] [mRotationQuaternionDiffTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/0.testFiniteDifference
[0;32m[       OK ] [mRotationQuaternionDiffTest/0.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/0.testMultiplication
[0;32m[       OK ] [mRotationQuaternionDiffTest/0.testMultiplication (0 ms)
[0;32m[----------] [m5 tests from RotationQuaternionDiffTest/0 (0 ms total)

[0;32m[----------] [m5 tests from RotationQuaternionDiffTest/1, where TypeParam = kindr::RotationQuaternionDiff<float>
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/1.testConstructors
[0;32m[       OK ] [mRotationQuaternionDiffTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/1.testGetters
[0;32m[       OK ] [mRotationQuaternionDiffTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/1.testSetters
[0;32m[       OK ] [mRotationQuaternionDiffTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/1.testFiniteDifference
[0;32m[       OK ] [mRotationQuaternionDiffTest/1.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mRotationQuaternionDiffTest/1.testMultiplication
[0;32m[       OK ] [mRotationQuaternionDiffTest/1.testMultiplication (0 ms)
[0;32m[----------] [m5 tests from RotationQuaternionDiffTest/1 (0 ms total)

[0;32m[----------] [m4 tests from RotationMatrixDiffTest/0, where TypeParam = kindr::RotationMatrixDiff<double>
[0;32m[ RUN      ] [mRotationMatrixDiffTest/0.testConstructors
[0;32m[       OK ] [mRotationMatrixDiffTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/0.testSetters
[0;32m[       OK ] [mRotationMatrixDiffTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/0.testFiniteDifference
[0;32m[       OK ] [mRotationMatrixDiffTest/0.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/0.testFiniteDifferenceInverse
[0;32m[       OK ] [mRotationMatrixDiffTest/0.testFiniteDifferenceInverse (0 ms)
[0;32m[----------] [m4 tests from RotationMatrixDiffTest/0 (0 ms total)

[0;32m[----------] [m4 tests from RotationMatrixDiffTest/1, where TypeParam = kindr::RotationMatrixDiff<float>
[0;32m[ RUN      ] [mRotationMatrixDiffTest/1.testConstructors
[0;32m[       OK ] [mRotationMatrixDiffTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/1.testSetters
[0;32m[       OK ] [mRotationMatrixDiffTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/1.testFiniteDifference
[0;32m[       OK ] [mRotationMatrixDiffTest/1.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mRotationMatrixDiffTest/1.testFiniteDifferenceInverse
[0;32m[       OK ] [mRotationMatrixDiffTest/1.testFiniteDifferenceInverse (0 ms)
[0;32m[----------] [m4 tests from RotationMatrixDiffTest/1 (0 ms total)

[0;32m[----------] [m7 tests from EulerAnglesZyxDiffTest/0, where TypeParam = kindr::EulerAnglesZyxDiff<double>
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.testConstructors
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.testGetters
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.testSetters
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.testFiniteDifference
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.testFiniteDifferenceInverse
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.testFiniteDifferenceInverse (1 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.mappingLocalAngularVelocity
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.mappingLocalAngularVelocity (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/0.mappingLocalAngularVelocityInverse
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/0.mappingLocalAngularVelocityInverse (0 ms)
[0;32m[----------] [m7 tests from EulerAnglesZyxDiffTest/0 (1 ms total)

[0;32m[----------] [m7 tests from EulerAnglesZyxDiffTest/1, where TypeParam = kindr::EulerAnglesZyxDiff<float>
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.testConstructors
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.testGetters
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.testSetters
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.testFiniteDifference
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.testFiniteDifferenceInverse
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.testFiniteDifferenceInverse (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.mappingLocalAngularVelocity
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.mappingLocalAngularVelocity (0 ms)
[0;32m[ RUN      ] [mEulerAnglesZyxDiffTest/1.mappingLocalAngularVelocityInverse
[0;32m[       OK ] [mEulerAnglesZyxDiffTest/1.mappingLocalAngularVelocityInverse (0 ms)
[0;32m[----------] [m7 tests from EulerAnglesZyxDiffTest/1 (0 ms total)

[0;32m[----------] [m8 tests from EulerAnglesXyzDiffTest/0, where TypeParam = kindr::EulerAnglesXyzDiff<double>
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.testConstructors
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.testGetters
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.testSetters
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.testFiniteDifference
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.testFiniteDifferenceInverse
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.testFiniteDifferenceInverse (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.mappingLocalAngularVelocity
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.mappingLocalAngularVelocity (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.mappingLocalAngularVelocityInverse
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.mappingLocalAngularVelocityInverse (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/0.secondDiff
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/0.secondDiff (0 ms)
[0;32m[----------] [m8 tests from EulerAnglesXyzDiffTest/0 (0 ms total)

[0;32m[----------] [m8 tests from EulerAnglesXyzDiffTest/1, where TypeParam = kindr::EulerAnglesXyzDiff<float>
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.testConstructors
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.testConstructors (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.testGetters
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.testGetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.testSetters
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.testSetters (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.testFiniteDifference
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.testFiniteDifference (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.testFiniteDifferenceInverse
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.testFiniteDifferenceInverse (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.mappingLocalAngularVelocity
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.mappingLocalAngularVelocity (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.mappingLocalAngularVelocityInverse
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.mappingLocalAngularVelocityInverse (0 ms)
[0;32m[ RUN      ] [mEulerAnglesXyzDiffTest/1.secondDiff
[0;32m[       OK ] [mEulerAnglesXyzDiffTest/1.secondDiff (0 ms)
[0;32m[----------] [m8 tests from EulerAnglesXyzDiffTest/1 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m82 tests from 22 test suites ran. (1 ms total)
[0;32m[  PASSED  ] [m82 tests.

[0;33m  YOU HAVE 2 DISABLED TESTS

[m-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsRotationDiff.xml"
[100%] Built target _run_tests_kindr_gtest_runUnitTestsRotation
[100%] Built target _run_tests_kindr_gtest_runUnitTestsRotationDiff
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPositions --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPositions.xml
[0;32m[==========] [mRunning 0 tests from 0 test suites.
[0;32m[==========] [m0 tests from 0 test suites ran. (0 ms total)
[0;32m[  PASSED  ] [m0 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPositions.xml"
[100%] Built target _run_tests_kindr_gtest_runUnitTestsPositions
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPoseDiff --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPoseDiff.xml
[0;32m[==========] [mRunning 20 tests from 8 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m3 tests from TwistTest/0, where TypeParam = kindr::TwistLinearVelocityRotationQuaternionDiff<double>
[0;32m[ RUN      ] [mTwistTest/0.testConstructor
[0;32m[       OK ] [mTwistTest/0.testConstructor (0 ms)
[0;32m[ RUN      ] [mTwistTest/0.testInitial
0.1 0.2 0.3 1 2 3 4
0.1
0.2
0.3
  4
  6
  8
[0;32m[       OK ] [mTwistTest/0.testInitial (0 ms)
[0;32m[ RUN      ] [mTwistTest/0.testSetZero
[0;32m[       OK ] [mTwistTest/0.testSetZero (0 ms)
[0;32m[----------] [m3 tests from TwistTest/0 (0 ms total)

[0;32m[----------] [m3 tests from TwistTest/1, where TypeParam = kindr::TwistLinearVelocityRotationQuaternionDiff<float>
[0;32m[ RUN      ] [mTwistTest/1.testConstructor
[0;32m[       OK ] [mTwistTest/1.testConstructor (0 ms)
[0;32m[ RUN      ] [mTwistTest/1.testInitial
0.1 0.2 0.3 1 2 3 4
0.1
0.2
0.3
  4
  6
  8
[0;32m[       OK ] [mTwistTest/1.testInitial (0 ms)
[0;32m[ RUN      ] [mTwistTest/1.testSetZero
[0;32m[       OK ] [mTwistTest/1.testSetZero (0 ms)
[0;32m[----------] [m3 tests from TwistTest/1 (0 ms total)

[0;32m[----------] [m1 test from LinearVelocityTest/0, where TypeParam = kindr::Vector<(kindr::PhysicalType)8, double, 3>
[0;32m[ RUN      ] [mLinearVelocityTest/0.testLinearVelocity
[0;32m[       OK ] [mLinearVelocityTest/0.testLinearVelocity (0 ms)
[0;32m[----------] [m1 test from LinearVelocityTest/0 (0 ms total)

[0;32m[----------] [m1 test from LinearVelocityTest/1, where TypeParam = kindr::Vector<(kindr::PhysicalType)8, float, 3>
[0;32m[ RUN      ] [mLinearVelocityTest/1.testLinearVelocity
[0;32m[       OK ] [mLinearVelocityTest/1.testLinearVelocity (0 ms)
[0;32m[----------] [m1 test from LinearVelocityTest/1 (0 ms total)

[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/0, where TypeParam = kindr::TwistLinearVelocityLocalAngularVelocity<double>
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/0.constructors
[0;32m[       OK ] [mTwistWithAngularVelocityTest/0.constructors (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/0.getters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/0.getters (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/0.setters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/0.setters (0 ms)
[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/0 (0 ms total)

[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/1, where TypeParam = kindr::TwistLinearVelocityLocalAngularVelocity<float>
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/1.constructors
[0;32m[       OK ] [mTwistWithAngularVelocityTest/1.constructors (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/1.getters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/1.getters (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/1.setters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/1.setters (0 ms)
[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/1 (0 ms total)

[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/2, where TypeParam = kindr::TwistLinearVelocityGlobalAngularVelocity<double>
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/2.constructors
[0;32m[       OK ] [mTwistWithAngularVelocityTest/2.constructors (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/2.getters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/2.getters (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/2.setters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/2.setters (0 ms)
[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/2 (0 ms total)

[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/3, where TypeParam = kindr::TwistLinearVelocityGlobalAngularVelocity<float>
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/3.constructors
[0;32m[       OK ] [mTwistWithAngularVelocityTest/3.constructors (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/3.getters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/3.getters (0 ms)
[0;32m[ RUN      ] [mTwistWithAngularVelocityTest/3.setters
[0;32m[       OK ] [mTwistWithAngularVelocityTest/3.setters (0 ms)
[0;32m[----------] [m3 tests from TwistWithAngularVelocityTest/3 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m20 tests from 8 test suites ran. (0 ms total)
[0;32m[  PASSED  ] [m20 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPoseDiff.xml"
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsPose --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPose.xml
[100%] Built target _run_tests_kindr_gtest_runUnitTestsPoseDiff
[0;32m[==========] [mRunning 38 tests from 6 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m1 test from Position3Test/0, where TypeParam = kindr::Vector<(kindr::PhysicalType)9, double, 3>
[0;32m[ RUN      ] [mPosition3Test/0.testPosition3
[0;32m[       OK ] [mPosition3Test/0.testPosition3 (0 ms)
[0;32m[----------] [m1 test from Position3Test/0 (0 ms total)

[0;32m[----------] [m1 test from Position3Test/1, where TypeParam = kindr::Vector<(kindr::PhysicalType)9, float, 3>
[0;32m[ RUN      ] [mPosition3Test/1.testPosition3
[0;32m[       OK ] [mPosition3Test/1.testPosition3 (0 ms)
[0;32m[----------] [m1 test from Position3Test/1 (0 ms total)

[0;32m[----------] [m9 tests from HomogeneousTransformationTest/0, where TypeParam = kindr::HomogeneousTransformation<double, kindr::Vector<(kindr::PhysicalType)9, double, 3>, kindr::RotationQuaternion<double> >
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testCopyConstructor
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testCopyConstructor (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testSetIdentity
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testSetIdentity (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testComparisonEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testComparisonNotEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testTransformAndInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testTransformAndInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testConcatenation
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testConcatenation (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/0.testGenericRotateVectorCompilable
[0;32m[       OK ] [mHomogeneousTransformationTest/0.testGenericRotateVectorCompilable (0 ms)
[0;32m[----------] [m9 tests from HomogeneousTransformationTest/0 (0 ms total)

[0;32m[----------] [m9 tests from HomogeneousTransformationTest/1, where TypeParam = kindr::HomogeneousTransformation<float, kindr::Vector<(kindr::PhysicalType)9, float, 3>, kindr::RotationQuaternion<float> >
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testCopyConstructor
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testCopyConstructor (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testSetIdentity
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testSetIdentity (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testComparisonEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testComparisonNotEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testTransformAndInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testTransformAndInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testConcatenation
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testConcatenation (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/1.testGenericRotateVectorCompilable
[0;32m[       OK ] [mHomogeneousTransformationTest/1.testGenericRotateVectorCompilable (0 ms)
[0;32m[----------] [m9 tests from HomogeneousTransformationTest/1 (0 ms total)

[0;32m[----------] [m9 tests from HomogeneousTransformationTest/2, where TypeParam = kindr::HomogeneousTransformation<double, kindr::Vector<(kindr::PhysicalType)9, double, 3>, kindr::RotationMatrix<double> >
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testCopyConstructor
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testCopyConstructor (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testSetIdentity
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testSetIdentity (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testComparisonEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testComparisonNotEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testTransformAndInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testTransformAndInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testConcatenation
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testConcatenation (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/2.testGenericRotateVectorCompilable
[0;32m[       OK ] [mHomogeneousTransformationTest/2.testGenericRotateVectorCompilable (0 ms)
[0;32m[----------] [m9 tests from HomogeneousTransformationTest/2 (0 ms total)

[0;32m[----------] [m9 tests from HomogeneousTransformationTest/3, where TypeParam = kindr::HomogeneousTransformation<float, kindr::Vector<(kindr::PhysicalType)9, float, 3>, kindr::RotationMatrix<float> >
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testCopyConstructor
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testCopyConstructor (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testSetIdentity
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testSetIdentity (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testComparisonEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testComparisonEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testComparisonNotEqual
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testComparisonNotEqual (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testTransformAndInverseTransform
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testTransformAndInverseTransform (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testConcatenation
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testConcatenation (0 ms)
[0;32m[ RUN      ] [mHomogeneousTransformationTest/3.testGenericRotateVectorCompilable
[0;32m[       OK ] [mHomogeneousTransformationTest/3.testGenericRotateVectorCompilable (0 ms)
[0;32m[----------] [m9 tests from HomogeneousTransformationTest/3 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m38 tests from 6 test suites ran. (1 ms total)
[0;32m[  PASSED  ] [m38 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsPose.xml"
[100%] Built target _run_tests_kindr_gtest_runUnitTestsPose
-- run_tests.py: execute commands
  /home/david/Desktop/SLAM_project/devel/.private/kindr/lib/kindr/runUnitTestsVector --gtest_output=xml:/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsVector.xml
[0;32m[==========] [mRunning 18 tests from 6 test suites.
[0;32m[----------] [mGlobal test environment set-up.
[0;32m[----------] [m3 tests from VectorTest/0, where TypeParam = kindr::Vector<(kindr::PhysicalType)0, double, 5>
[0;32m[ RUN      ] [mVectorTest/0.testVector
[0;32m[       OK ] [mVectorTest/0.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/0.squaredNorm
[0;32m[       OK ] [mVectorTest/0.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/0.projectOn
[0;32m[       OK ] [mVectorTest/0.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/0 (0 ms total)

[0;32m[----------] [m3 tests from VectorTest/1, where TypeParam = kindr::Vector<(kindr::PhysicalType)0, float, 5>
[0;32m[ RUN      ] [mVectorTest/1.testVector
[0;32m[       OK ] [mVectorTest/1.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/1.squaredNorm
[0;32m[       OK ] [mVectorTest/1.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/1.projectOn
[0;32m[       OK ] [mVectorTest/1.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/1 (0 ms total)

[0;32m[----------] [m3 tests from VectorTest/2, where TypeParam = kindr::Vector<(kindr::PhysicalType)10, double, 5>
[0;32m[ RUN      ] [mVectorTest/2.testVector
[0;32m[       OK ] [mVectorTest/2.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/2.squaredNorm
[0;32m[       OK ] [mVectorTest/2.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/2.projectOn
[0;32m[       OK ] [mVectorTest/2.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/2 (0 ms total)

[0;32m[----------] [m3 tests from VectorTest/3, where TypeParam = kindr::Vector<(kindr::PhysicalType)10, float, 5>
[0;32m[ RUN      ] [mVectorTest/3.testVector
[0;32m[       OK ] [mVectorTest/3.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/3.squaredNorm
[0;32m[       OK ] [mVectorTest/3.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/3.projectOn
[0;32m[       OK ] [mVectorTest/3.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/3 (0 ms total)

[0;32m[----------] [m3 tests from VectorTest/4, where TypeParam = kindr::Vector<(kindr::PhysicalType)9, double, 5>
[0;32m[ RUN      ] [mVectorTest/4.testVector
[0;32m[       OK ] [mVectorTest/4.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/4.squaredNorm
[0;32m[       OK ] [mVectorTest/4.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/4.projectOn
[0;32m[       OK ] [mVectorTest/4.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/4 (0 ms total)

[0;32m[----------] [m3 tests from VectorTest/5, where TypeParam = kindr::Vector<(kindr::PhysicalType)9, float, 5>
[0;32m[ RUN      ] [mVectorTest/5.testVector
[0;32m[       OK ] [mVectorTest/5.testVector (0 ms)
[0;32m[ RUN      ] [mVectorTest/5.squaredNorm
[0;32m[       OK ] [mVectorTest/5.squaredNorm (0 ms)
[0;32m[ RUN      ] [mVectorTest/5.projectOn
[0;32m[       OK ] [mVectorTest/5.projectOn (0 ms)
[0;32m[----------] [m3 tests from VectorTest/5 (0 ms total)

[0;32m[----------] [mGlobal test environment tear-down
[0;32m[==========] [m18 tests from 6 test suites ran. (1 ms total)
[0;32m[  PASSED  ] [m18 tests.
-- run_tests.py: verify result "/home/david/Desktop/SLAM_project/build/kindr/test_results/kindr/gtest-runUnitTestsVector.xml"
[100%] Built target _run_tests_kindr_gtest_runUnitTestsVector
[100%] Built target _run_tests_kindr_gtest
[100%] Built target _run_tests_kindr
[100%] Built target run_tests
